#include <iostream>



using namespace std;



class Node{

public:

    int Value;

    Node* Next;

};



void printList(Node* n){

    while(n != NULL){

        cout<< n->Value <<endl;

        n = n->Next;

    }

}



void insertAtTheFront(Node** head, int newValue){

    //Prepare a newNode

    // Put it in front of current head

    // Move head of the list to point to the newNode



    Node* newHead = new Node();

    newHead->Value = newValue;



    newHead->Next = *head;



    *head =  newHead;



}



void insertAtTheEnd(Node** head, int newValue){

    // Prepare a newNode

    Node* newNode = new Node();

    newNode->Value = newValue;

    newNode->Next = NULL;

    // if Linked list is empty, newNode will be a head node

    if(*head == NULL){

        *head = newNode;

        return;

    }

    // find the last node

    Node* last = *head;

    while(last->Next != NULL){

        last = last->Next;

    }

    // Insert newNode after last node(at the end)

    last->Next = newNode;

}



void insertAfter(Node* previous, int newValue){

    //check if previous node is Null

    if(previous == NULL){

        cout<<"Previous can not be NULL";

        return;

    }

    // Prepare a newNode

    Node* newNode = new Node();

    newNode->Value = newValue;

    // Insert newNode after previous

    newNode->Next = previous->Next;

    previous->Next = newNode;

}



int main(){

    Node* head = new Node();

    Node* second = new Node();

    Node* third = new Node();



    head->Value = 1;

    head->Next = second;

    second->Value = 2;

    second->Next = third;

    third->Value = 3;

    third->Next = NULL;



    insertAtTheFront(&head, -1);

    insertAtTheEnd(&head, 6);

    insertAfter(second, -1);

    printList(head);

    return 0;

}
