#include <iostream>

using namespace std;



class Node{

public:

    int data;

    Node* left;

    Node* right;

};



Node* createNode(int data){

    Node* newNode = new Node();

    newNode->data = data;

    newNode->left = newNode->right = nullptr;

    return newNode;

}



int height(Node* root){

    if(root == nullptr) return -1;



    int lh = height(root->left);

    int rh = height(root->right);

    return lh > rh ? lh + 1 : rh + 1;

}



void postOrderPrintTree(Node* root){

    if(root == nullptr) return;



    postOrderPrintTree(root->left);

    postOrderPrintTree(root->right);

    cout<<root->data<<" ";

}



void inOrderPrintTree(Node* root){

    if(root == nullptr) return;

    inOrderPrintTree(root->left);

    cout<<root->data<<" ";

    inOrderPrintTree(root->right);

}



void preOrderPrintTree(Node* root){

    if(root == nullptr) return;



    cout<<root->data<<" ";

    preOrderPrintTree(root->left);

    preOrderPrintTree(root->right);

}



void printGivenLevel(Node* root, int level){//BFS

    if(root == nullptr) return;



    else if(level == 0)

        cout<<root->data<<" ";

    else{

        printGivenLevel(root->left, level-1);

        printGivenLevel(root->right, level-1);

    }

}



void printLevelOrderBFS(Node* root){

    int h = height(root);

    for(int i = 0; i <= h; i++){

        printGivenLevel(root, i);

    }

}



int main(){

    //level 1

    Node* root = createNode(1);

    //level 2

    root->left = createNode(2);

    root->right = createNode(3);

    //level 3

    root->left->left = createNode(4);

    root->left->right = createNode(5);

    root->right->left =createNode(6);

    root->right->right = createNode(7);

    //level 4

    root->left->right->left = createNode(9);

    root->right->right->left = createNode(15);



    preOrderPrintTree(root);

    cout<<endl;

    inOrderPrintTree(root);

    cout<<endl;

    postOrderPrintTree(root);

    cout<<endl;

    int result = height(root);

    cout<<result<<endl;

    printLevelOrderBFS(root);

    return 0;

    }
